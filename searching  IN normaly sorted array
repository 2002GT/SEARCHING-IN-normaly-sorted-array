//  -------SEARCHING IN NEARLY SORTED ARRAY----------(BINARY SEARCH)
//  sorted array -  5 10 20 30 40
//  nearly sorted - 5 10 30 20 40
 
//  SOLUTION-  in nearly sorted array ith element can be presented on i+1,
//              or i-1 place.
//              that's why we will search ele in mid, mid+1, mid-1, and further.



// #include <iostream>

// using namespace std;


//  int normal_sorted(int n, int arr[] , int key){
//      int e = n-1;
//      int s = 0;
     
//      while(s<=e){
//          int mid  = s + e - s/2;
         
         
//          if(arr[mid] == key){
//              return mid;
//          }
         
//         //  CHECK THE OVERFLOW CONDITION AS WELL
        
//         if(mid-1 >= s && arr[mid-1] == key){
//             return mid-1;
//         }
        
//         if(mid+1 <= e && arr[mid+1] == key){
//             return mid+1;
//         }
        
//     //  ---------CHECKING element IN LEFT OR RIGHT HALF------------
//          if(arr[mid] < key){
//              s = mid+2;
//          }
         
//          if(arr[mid] > key){
//              e = mid-2;
//          }
    
       
//      }
     
//      return -1;
//  }

// int main()
// {
//   int n;
//   cin>>n;
   
//   int arr[n];
//   for(int i=0; i<n-1; i++){
//       cin>>arr[i];
//   }
   
//   int key;
//   cin>>key;
   
//   cout<<normal_sorted(n , arr , key)<<endl;

//     return 0;
// }



// C++ program to find an element
// in an almost sorted array
#include <stdio.h>

// A recursive binary search based function.
// It returns index of x in given array
// arr[l..r] is present, otherwise -1
int binarySearch(int arr[], int l, int r, int x)
{
if (r >= l)
{
		int mid = l + (r - l) / 2;

		// If the element is present at
		// one of the middle 3 positions
		if (arr[mid] == x)
			return mid;
		if (mid >= l && arr[mid - 1] == x)
			return (mid - 1);
		if (mid <= r && arr[mid + 1] == x)
			return (mid + 1);

		// If element is smaller than mid, then
		// it can only be present in left subarray
		if (arr[mid] > x)
			return binarySearch(arr, l, mid - 2, x);

		// Else the element can only be present
		// in right subarray
		return binarySearch(arr, mid + 2, r, x);
}

// We reach here when element is not present in array
return -1;
}

// Driver Code
int main(void)
{
int arr[] = {3, 2, 10, 4, 40};
int n = sizeof(arr) / sizeof(arr[0]);
int x  = 4;
int result = binarySearch(arr, 0, n - 1, x);

(result == -1) ? printf("Element is not present in array")
               : printf("Element is present at index %d",
                         result);
return 0;
}
